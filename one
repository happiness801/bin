#!/usr/bin/env bash
# 
# Super simple OneDrive search; assuming a listing was created similar to:
#    cd $ONEDRIVE && ll -R > LIST.OneDrive.ll-R.20200815-1322.txt
#
#     or using `one-create-find-list` or `one-create-ll-list` tools
#
# Assumes $ONEDRIVE is configured and pointing to the user's OneDrive root folder
#

search=$1
listfile=$2

if [[ $listfile == "" ]]; then
	listfile=($ONEDRIVE/LIST.OneDrive.*.txt)
fi

type=search

if [[ -f $search ]]; then
	type=file
elif [[ -d $search ]]; then
	type=directory
else
	type=search
fi

# NOTE: I don't remember why, but I was initially filtering out when $fb = '*'
# NOTE: You have to escape these as they are used in a regex to filter files we don't care about
ignorelist=(\\* Thumbs\.db desktop\.ini ZbThumbnail\.info Picasa\.ini Folder\.jpg AlbumArt.*\.jpg WarUser\.dat README\.\* Front\.jpg Back\.jpg index\.\*)
ignoreregex="^($(IFS=\|; echo "${ignorelist[*]}"))$"

echo "    <-- OneDriveSearch: $type:[$search] in [$listfile] -->"

shopt -s nocasematch

if [[ $type == 'directory' ]]; then
	for f in "$search"/*
	do
		fb=`basename "$f"`
			
		if [[ $fb =~ $ignoreregex ]]; then
			echo "        NOTE: Ignoring [$fb]"
		else
			if [[ -d $f ]]; then
				one "$f" $listfile
			else
				one "/$fb$" $listfile || echo "##### NOTFOUND: $f"
			fi
		fi
	done
else
	# NOTE: Still have issues with single-quotes in filenames
	# They are being escaped and the egrep call doesn't like that...
	#escaped=`printf "%q" "${search}"`
	#egrep -i "(^\.|${escaped})" $listfile | grep -i -B 1 "$search"
	
	# This version works with quotes in filenames, but I think it had issues
	# with filenames that contain the name of other files (false positives)
	# but I can't remember the details (2020-12-27)
	# This also has issues with filenames with [ or ] in them...
	# Perhaps what is needed is []'s need to be escaped but 's should NOT be...
	# Now escaping []'s seems to be working with a 'find'-based list (2021-01-01)
	search=${search//\[/\\[}
	search=${search//\]/\\]}
	grep -i "${search}" $listfile
fi
